// Code generated by MockGen. DO NOT EDIT.
// Source: Grabber\usecases\ApiRepositoryInterace\mock.go

// Package mock_ApiRepositoryInterace is a generated GoMock package.
package mock_ApiRepositoryInterface

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockRepository) GetOne() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOne indicates an expected call of GetOne
func (mr *MockRepositoryMockRecorder) GetOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRepository)(nil).GetOne))
}

// GetTwo mocks base method
func (m *MockRepository) GetTwo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwo")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTwo indicates an expected call of GetTwo
func (mr *MockRepositoryMockRecorder) GetTwo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwo", reflect.TypeOf((*MockRepository)(nil).GetTwo))
}
